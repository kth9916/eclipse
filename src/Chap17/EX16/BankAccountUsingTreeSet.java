package Chap17.EX16;

import java.util.Iterator;
import java.util.Scanner;
import java.util.TreeSet;

// Account 객체를 TreeSet에 저장. ano[계좌 번호],  owner[이름], balance[예금 금액]
// TreeSet에 일반객체를 넣을 때 어떤 컬럼을 정렬할지를 지정. Comparable<E>, Comparator<E>
// Account 객체를 수정하지 않고 balance 값이 큰 것부터 출력되도록 구성 <내림차순>



public class BankAccountUsingTreeSet {

	private static TreeSet<Account> tSet = new TreeSet<Account>();		
	
	private static Scanner scanner = new Scanner(System.in);
	
	private static void createAccount() {

		System.out.println("---------------------");
		System.out.println("계좌 생성 완료");
		System.out.println("---------------------");
		System.out.println("1. 계좌번호를 입력하세요.");
		String ano = scanner.next();
		System.out.println("2. 이름을 입력하세요.");
		String owner = scanner.next(); 	// 계좌 번호를 인풋 받아서 ano 변수에 할당
		System.out.println("3. 초기통장 금액을 입력하세요.");
		int balance = scanner.nextInt();
		System.out.println("입력 완료");
		
		// 각 필드의 정보를 사용자로부터 할당받아서 객체를 생성 후 객체에 필드의 값을 저장
		Account newAccount = new Account(ano,owner,balance);
		
		// 객체(newAccount)를 배열에 저장(비어있는 방에 저장) for 문을 사용해서 null인 방을 찾아서 null인 경우 객체를 저장
		tSet.add(newAccount);
		System.out.println("계좌 생성 완료");
		
	}
		
	
	private static void accountList() {
		// 코드 작성 : 2. 계좌 목록 출력 : 배열에 저장된 객체를 가져와서 계좌번호, 계좌주, 이름, 통장 금액을 출력
		// 배열의 각 방을 순회하면서 null이 아닌 경우 배열에서 객체를 꺼내서 필드의 정보를 출력
		Iterator<Account> ir = tSet.iterator();
		while(ir.hasNext()) {
			Account account = ir.next();
			if(account != null) {
				System.out.println(account.getAno() + "   " + account.getOwner() + "   " + account.getBalance() );
			}
		}
		
	}
	private static void deposit() {
		// 코드 작성 : 3. 예금 : <== 계좌번호를 받아서 객체에서 해당 계좌를 찾아서, 입금금액 : 인풋 받아서 저장
		// 1. 사용자로부터 입금할 계좌를 받아야 한다.
		// 2. 사용자로부터 받은 계좌 번호를 배열에 저장된 객체 내의 계좌 번호를 확인 후 해당 계좌에 입금
		System.out.println("예금할 계좌의 계좌번호를 입력하세요");
		String ano = scanner.next();
		
		System.out.println("입금할 금액을 넣으세요.");
		int balance = scanner.nextInt();
		
		Account account = findAccount(ano);
		
		if(account == null) {
			System.out.println("결과 : 해당 계좌가 존재하지 않습니다.");
			return;
		}

		
		account.setBalance(account.getBalance() + balance);  	// setter를 사용해서 기존의 금액 + 추가 입금 금액
		System.out.println("입금 완료");
		System.out.println("현재 금액 : " + account.getBalance());
/*	
 * 내가 만듬 -- > 잘됨	
		Iterator<Account> iterator1 = tSet.iterator();
		while(iterator1.hasNext()) {
			Account account = iterator1.next();
			String dbAno = account.getAno();
			
			if(dbAno.equals(ano)) {
				account.setBalance(account.getBalance() + balance);
				System.out.println("입금 완료");
				System.out.println(account.getOwner() + "의 현재 금액 : " + account.getBalance());
				return true;
			}
			
		}
		System.out.println("해당 계좌가 없습니다.");
		return false;	
 * 
 */
	}
	private static void withdraw() {
		// 코드 작성 : 4. 출금 : 계좌 번호를 인풋 받아 해당 계좌를 객체에서 찾아서 출금.
		System.out.println("출금할 계좌의 계좌번호를 입력하세요");
		String ano = scanner.next();
		
		Account account = findAccount(ano);
		if(account == null) {
			System.out.println("해당 계좌가 없습니다.");
			return;
		}
		
		System.out.println("출금할 금액을 넣으세요.");
		int balance = scanner.nextInt();
		
		if(balance > account.getBalance()) {
			System.out.println("잔액이 부족합니다.");
		} else {
			account.setBalance(account.getBalance()-balance);
			System.out.println("출금 완료");
			System.out.println("현재 금액 : " + account.getBalance());
		}

		// 내가 만듬 --> 잘됨
//		System.out.println("출금할 계좌의 계좌번호를 입력하세요");
//		String ano = scanner.next();
//		
//		System.out.println("출금할 금액을 넣으세요.");
//		int balance = scanner.nextInt();
//		
//		Iterator<Account> iterator1 = tSet.iterator();
//		while(iterator1.hasNext()) {
//			Account account = iterator1.next();
//			String dbAno = account.getAno();
//			
//			if(dbAno.equals(ano)) {
//				account.setBalance(account.getBalance() - balance);
//				System.out.println("입금 완료");
//				System.out.println(account.getOwner() +"의 현재 금액 : " + account.getBalance());
//				return true;
//			}
//			
//		}
//		System.out.println("해당 계좌가 없습니다.");
//		return false;	
	}
	
	private static Account findAccount(String ano) {
		Account account = null;
		Iterator<Account> ir = tSet.iterator(); 	// Iterator 뒤에 <Account>를 넣어야 한다는 것을 잊음
		while(ir.hasNext()) {
			Account a1 = ir.next();
			String dbAno = a1.getAno();
			if(dbAno.equals(ano)) {
				account = a1;
				return account;
			}
		}
		return account;
	}
	
	// 배열에서 Account 객체 내의 ano[계좌번호]와 동일한 계좌를 찾아서 찾은 객체를 리턴으로 돌려줌.
	// 예금, 출금할 때 공통코드, 여러 메소드에서 중복 사용 될 때 별도의 메소드를 생성해서 중복코드를 간단하게 만들어 준다
	
	public static void main(String[] args) {
		boolean run = true;
		while(run) {
			System.out.println("--------------------------------------------------");
			System.out.println("1. 계좌생성 | 2. 계좌목록 | 3. 예금 | 4. 출금 | 5. 종료");
			System.out.println("--------------------------------------------------");
			System.out.print("선택>>");
			int selectNo = scanner.nextInt();
			
			if(selectNo == 1) {
				createAccount(); 		// 메소드 호출, 객체 생성 없이 메소드명으로 호출(static)
			} else if(selectNo == 2) {
				accountList(); 		// 메소드 호출
			} else if(selectNo == 3) {
				deposit();
			} else if(selectNo == 4) {
				withdraw();
			} else if(selectNo == 5) {
				run = false;
				break;
			}
		}
		scanner.close();
		System.out.println("프로그램 종료");

	}

}
